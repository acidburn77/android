From 84a95cd1a032eb1a82e76ee2176a698e19a4f29b Mon Sep 17 00:00:00 2001
From: milaq <micha.laqua@gmail.com>
Date: Sat, 6 Dec 2014 16:42:21 +0100
Subject: [PATCH] Add support for ignoring exchange server policy (1/2)

Some of us don't like the policies enforced by some exchange server configurations or the inconveniences that come with it (safe lockscreen, etc.).
So make it possible to ignore any policies pushed by the exchange server.

based on the "ExchangeBypassXposed" module by Shantanu Goel.

This also requires the app to be signed with platform keys.
---
 Android.mk                                                   |  2 --
 emailcommon/Android.mk                                       |  2 --
 emailcommon/src/com/android/emailcommon/provider/Policy.java | 11 +++++++++++
 src/com/android/email/NotificationController.java            |  3 +++
 src/com/android/email/SecurityPolicy.java                    | 11 +++++++++++
 5 files changed, 25 insertions(+), 4 deletions(-)

diff --git a/Android.mk b/Android.mk
index a7dbba5..5e7cab0 100644
--- a/Android.mk
+++ b/Android.mk
@@ -61,8 +61,6 @@ ifeq (eng,$(TARGET_BUILD_VARIANT))
   LOCAL_PROGUARD_FLAG_FILES += proguard-test.flags
 endif
 
-LOCAL_SDK_VERSION := current
-
 include $(BUILD_PACKAGE)
 
 # only include rules to build other stuff for the original package, not the derived package.
diff --git a/emailcommon/Android.mk b/emailcommon/Android.mk
index 654e20d..cafc362 100644
--- a/emailcommon/Android.mk
+++ b/emailcommon/Android.mk
@@ -42,8 +42,6 @@ LOCAL_SRC_FILES += $(call all-java-files-under, $(apache_src_dir))
 LOCAL_SRC_FILES += $(imported_unified_email_files)
 LOCAL_SRC_FILES += $(call all-java-files-under, $(unified_email_src_dir)/com/android/emailcommon)
 
-LOCAL_SDK_VERSION := 17
-
 LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res
 
 include $(BUILD_STATIC_JAVA_LIBRARY)
diff --git a/emailcommon/src/com/android/emailcommon/provider/Policy.java b/emailcommon/src/com/android/emailcommon/provider/Policy.java
index f32b750..88ac10d 100755
--- a/emailcommon/src/com/android/emailcommon/provider/Policy.java
+++ b/emailcommon/src/com/android/emailcommon/provider/Policy.java
@@ -25,6 +25,7 @@ import android.database.Cursor;
 import android.net.Uri;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.os.SystemProperties;
 
 import com.android.emailcommon.utility.TextUtilities;
 import com.android.emailcommon.utility.Utility;
@@ -226,6 +227,16 @@ public final class Policy extends EmailContent implements EmailContent.PolicyCol
      * zero out complex characters for simple passwords.
      */
     public void normalize() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false)) {
+            mPasswordMode = PASSWORD_MODE_NONE;
+            mRequireRemoteWipe = false;
+            mRequireEncryption = false;
+            mRequireEncryptionExternal = false;
+            mRequireManualSyncWhenRoaming = false;
+            mDontAllowCamera = false;
+            mDontAllowAttachments = false;
+            mDontAllowHtml = false;
+        }
         if (mPasswordMode == PASSWORD_MODE_NONE) {
             mPasswordMaxFails = 0;
             mMaxScreenLockTime = 0;
diff --git a/src/com/android/email/NotificationController.java b/src/com/android/email/NotificationController.java
index e247f6b..0bec68d 100644
--- a/src/com/android/email/NotificationController.java
+++ b/src/com/android/email/NotificationController.java
@@ -31,6 +31,7 @@ import android.net.Uri;
 import android.os.Handler;
 import android.os.Looper;
 import android.os.Process;
+import android.os.SystemProperties;
 import android.provider.Settings;
 import android.support.v4.app.NotificationCompat;
 import android.text.TextUtils;
@@ -508,6 +509,8 @@ public class NotificationController {
      * account settings screen where he can view the list of enforced policies
      */
     public void showSecurityChangedNotification(Account account) {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return;
         final Intent intent = new Intent(Intent.ACTION_VIEW,
                 HeadlessAccountSettingsLoader.getIncomingSettingsUri(account.getId()));
         final String accountName = account.getDisplayName();
diff --git a/src/com/android/email/SecurityPolicy.java b/src/com/android/email/SecurityPolicy.java
index 3adf8b8..86db687 100644
--- a/src/com/android/email/SecurityPolicy.java
+++ b/src/com/android/email/SecurityPolicy.java
@@ -31,6 +31,7 @@ import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.RemoteException;
+import android.os.SystemProperties;
 
 import com.android.email.provider.AccountReconciler;
 import com.android.email.provider.EmailProvider;
@@ -246,6 +247,8 @@ public class SecurityPolicy {
      * @return true if the requested policies are active, false if not.
      */
     public boolean isActive(Policy policy) {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return true;
         int reasons = getInactiveReasons(policy);
         if (MailActivityEmail.DEBUG && (reasons != 0)) {
             StringBuilder sb = new StringBuilder("isActive for " + policy + ": ");
@@ -316,6 +319,8 @@ public class SecurityPolicy {
      * is needed (typically, by the user) before the required security polices are fully active.
      */
     public int getInactiveReasons(Policy policy) {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return 0;
         // select aggregate set if needed
         if (policy == null) {
             policy = getAggregatePolicy();
@@ -402,6 +407,8 @@ public class SecurityPolicy {
      * we only proceed if we are already active as an admin.
      */
     public void setActivePolicies() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return;
         DevicePolicyManager dpm = getDPM();
         // compute aggregate set of policies
         Policy aggregatePolicy = getAggregatePolicy();
@@ -664,6 +671,8 @@ public class SecurityPolicy {
      * return to the caller if there is an unexpected failure.  The wipe includes external storage.
      */
     public void remoteWipe() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return;
         DevicePolicyManager dpm = getDPM();
         if (dpm.isAdminActive(mAdminName)) {
             dpm.wipeData(DevicePolicyManager.WIPE_EXTERNAL_STORAGE);
@@ -681,6 +690,8 @@ public class SecurityPolicy {
      * @return true if we are already active, false if we are not
      */
     public boolean isActiveAdmin() {
+        if (SystemProperties.getBoolean("persist.exchange.nopolicy", false))
+            return true;
         DevicePolicyManager dpm = getDPM();
         return dpm.isAdminActive(mAdminName)
                 && dpm.hasGrantedPolicy(mAdminName, DeviceAdminInfo.USES_POLICY_EXPIRE_PASSWORD)
-- 
2.1.1

